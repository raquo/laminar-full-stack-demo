package com.raquo.app.codesnippets.generated

import com.raquo.app.codesnippets.CodeSnippet
import vendor.highlightjs.hljs.LanguageName

/** This file is generated at compile-time by CodeSnippetsGenerator.scala */
object GeneratedSnippets {
  
  val `codesnippets/generator` = List(
    CodeSnippet("./project/CodeSnippetsGenerator.scala", "CodeSnippetsGenerator.scala", "scala".asInstanceOf[LanguageName], 7, 78, "codesnippets/generator", List("object CodeSnippetsGenerator extends SourceGenerator(CodeFormatting()) {", "", "  private var maybeLastSnippets: Option[Map[String, List[SbtCodeSnippet]]] = None", "", "  // #Note: All the files under `./project` are compile-time files.", "  //  You need to do `sbt reload` after making changes to these files", "  //  for those changes to take effect.", "", "  /** Scan the codebase for code snippets (// BEGIN[key] and // END[key] comments),", "    * and write the snippets into the designated scala file.", "    * We use the snippets on the frontend to display the code of the examples.", "    */", "  def generate(rootPath: Path, targetPath: Path, packageName: String, objectName: String): Unit = {", "    val snippetsByKey = CodeBrowser.findCodeSnippets(rootPath)", "    // #Note: we're relying on structural comparison using `==`", "    //  to prevent unnecessary code generation when there are no", "    //  changes in snippets. Should reduce file watching thrashing.", "    if (!maybeLastSnippets.contains(snippetsByKey)) {", "      //println(\">>> Generating\")", "      maybeLastSnippets = Some(snippetsByKey)", "      printFile(", "        packageName = packageName,", "        objectName = objectName,", "        snippetsByKey = snippetsByKey", "      )", "      writeToFile(", "        filePath = targetPath.resolve(objectName + \".scala\"),", "        fileContent = getOutput()", "      )", "    } else {", "      //println(\"-- no changes --\")", "    }", "  }", "", "  def printFile(", "    packageName: String,", "    objectName: String,", "    snippetsByKey: Map[String, List[SbtCodeSnippet]]", "  ): Unit = {", "    line(s\"package ${packageName}\")", "    line(\"\")", "    line(\"import com.raquo.app.codesnippets.CodeSnippet\")", "    line(\"import vendor.highlightjs.hljs.LanguageName\")", "    line(\"\")", "    line(\"/** This file is generated at compile-time by CodeSnippetsGenerator.scala */\")", "    enter(s\"object ${objectName} {\", \"}\") {", "      line(\"\")", "      snippetsByKey.keys.toList.sorted.foreach { key =>", "        enter(s\"val `$key` = List(\", \")\") {", "          snippetsByKey(key).foreach { snippet =>", "            line(snippetRepr(snippet) + \",\")", "          }", "        }", "        line(\"\")", "      }", "    }", "  }", "", "  def snippetRepr(", "    snippet: SbtCodeSnippet", "  ): String = {", "    val fields = List(", "      repr(snippet.filePath),", "      repr(snippet.fileName),", "      repr(snippet.fileLanguage) + \".asInstanceOf[LanguageName]\",", "      snippet.startLineNumber, // #TODO Add repr method for int in SDT", "      snippet.endLineNumber,", "      repr(snippet.key),", "      snippet.lines.map(repr(_)).mkString(\"List(\", \", \", \")\"),", "    )", "    fields.mkString(s\"CodeSnippet(\", \", \", \")\")", "  }")),
  )
  
  val `codesnippets/highlight.js` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/JsApp.scala", "JsApp.scala", "scala".asInstanceOf[LanguageName], 12, 15, "codesnippets/highlight.js", List("// Load languages that we'll need for code snippets in Highlight.js", "hljs.registerLanguage(_.Scala, _.Scala)", "hljs.registerLanguage(_.Javascript, _.Javascript)", "hljs.registerLanguage(_.Less, _.Less)")),
    CodeSnippet("./client/src/main/scala/vendor/highlightjs/hljs.scala", "hljs.scala", "scala".asInstanceOf[LanguageName], 11, 75, "codesnippets/highlight.js", List("/** This is a simple but ergonomic wrapper for the Highlight.js library.", "  * The actual JS interface is in `object raw`, but we make it a bit nicer to use.", "  */", "object hljs {", "", "  JSImportSideEffect(\"highlight.js/styles/dark.min.css\")", "", "  /** Marker trait (compatible with Scala 2), those are actually just strings */", "  @js.native", "  trait LanguageName extends js.Any", "", "  /** [[https://highlightjs.readthedocs.io/en/latest/api.html Highlight.js API docs]] */", "  @js.native", "  @JSImport(\"highlight.js/lib/core\", JSImport.Default)", "  object raw extends js.Object {", "", "    trait HighlightOptions extends js.Object {", "      val language: LanguageName", "      val ignoreIllegals: Boolean | Unit = js.undefined", "    }", "", "    @js.native", "    trait HighlightResult extends js.Object {", "      /** Raw input code that was formatted */", "      val code: String", "      val language: LanguageName", "      /** HTML string with the formatted code */", "      val value: String", "    }", "", "    def highlight(code: String, options: HighlightOptions): HighlightResult = js.native", "", "    def registerLanguage(name: LanguageName, language: Language): Unit = js.native", "  }", "", "  // I like contextual APIs like this. Does not need extra imports,", "  // and autocomplete tells you what's available.", "  def registerLanguage(", "    name: LanguageName.type => LanguageName,", "    language: Language.type => Language", "  ): Unit = {", "    raw.registerLanguage(name(LanguageName), language(Language))", "  }", "", "  /** Convenient highlight method that returns a Laminar element */", "  def highlight(code: String, language: LanguageName, codeMods: Modifier[HtmlElement] = emptyMod): HtmlElement = {", "    val _language = language", "    val options = new raw.HighlightOptions {", "      val language: LanguageName = _language", "    }", "    val result = raw.highlight(code, options)", "    val jsElements = DomApi.unsafeParseHtmlStringIntoNodeArray(dangerousHtmlString = result.value)", "    val element = codeTag(cls(s\"hljs language-$language\"), codeMods)", "    jsElements.foreach(element.ref.appendChild)", "    pre(element)", "  }", "", "  object LanguageName {", "    val Scala: LanguageName = \"scala\".asInstanceOf[LanguageName]", "    val Javascript: LanguageName = \"javascript\".asInstanceOf[LanguageName]", "    val Less: LanguageName = \"less\".asInstanceOf[LanguageName]", "    val Css: LanguageName = \"css\".asInstanceOf[LanguageName]", "    val Html: LanguageName = \"xml\".asInstanceOf[LanguageName]", "  }", "}")),
  )
  
  val `codesnippets/object` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/codesnippets/CodeSnippet.scala", "CodeSnippet.scala", "scala".asInstanceOf[LanguageName], 11, 76, "codesnippets/object", List("case class CodeSnippet(", "  filePath: String,", "  fileName: String,", "  fileLanguage: hljs.LanguageName,", "  startLineNumber: Int,", "  endLineNumber: Int,", "  key: String,", "  lines: List[String]", ")", "", "object CodeSnippet {", "", "  JSImportSideEffect(\"@find/**/CodeSnippet.less\")", "", "  def render(snippet: CodeSnippet, startExpanded: Boolean = true): HtmlElement = {", "    val isExpandedVar = Var(startExpanded)", "    div(", "      cls(\"CodeSnippet u-bleed\"),", "      div(", "        cls(\"-sourceHeader u-unbleed\"),", "        onClick.mapTo(!isExpandedVar.now()) --> isExpandedVar,", "        span(", "          cls(\"-arrow\"),", "          child.text <-- isExpandedVar.signal.map(if (_) \"▼\" else \"▶\")", "        ),", "        span(", "          cls(\"-filename\"),", "          snippet.fileName + \" \" + lineNumbers(snippet),", "        ),", "        a(", "          cls(\"-githubLink\"),", "          // We need `stopPropagation` to prevent the link click event from bubbling,", "          // triggering the parent div's onClick above. We give it an empty observer", "          // just to get the subscription going, `stopPropagation` already contains", "          // our desired side effect.", "          // See https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling", "          onClick.stopPropagation --> Observer.empty,", "          href(githubUrl(snippet)),", "          target(\"_blank\"),", "          span(cls(\"u-hideOnMobile\"), \"View on \"),", "          \"Github\"", "        )", "      ),", "      child <-- isExpandedVar.signal.map(if (_) {", "        hljs.highlight(", "          code = snippet.lines.mkString(\"\\n\"),", "          language = snippet.fileLanguage", "        )", "      } else emptyNode)", "    )", "  }", "", "  def lineNumbers(snippet: CodeSnippet): String = {", "    if (snippet.startLineNumber == 0 && snippet.endLineNumber == 0) {", "      \"\"", "    } else if (snippet.startLineNumber == snippet.endLineNumber) {", "      s\"L${snippet.startLineNumber}\"", "    } else {", "      s\"L${snippet.startLineNumber}-L${snippet.endLineNumber}\"", "    }", "  }", "", "  def githubUrl(snippet: CodeSnippet): String = {", "    \"https://github.com/raquo/laminar-full-stack-demo/blob/master/\" + snippet.filePath + \"#\" + lineNumbers(snippet)", "  }", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/codesnippets/CodeSnippet.less", "CodeSnippet.less", "less".asInstanceOf[LanguageName], 2, 57, "codesnippets/object", List("@import \"../../../../../../../style.less\"; // imports .u-bleed class", "", ".CodeSnippet {", "", "  > .-sourceHeader {", "    display: flex;", "    flex-direction: row;", "    padding-top: 5px;", "    padding-bottom: 4px;", "    align-items: center;", "    color: #333;", "    font-size: 0.8em;", "    font-family: monospace;", "    background: #eee;", "", "    &:hover {", "      background: skyblue;", "      cursor: pointer;", "    }", "", "    > .-arrow {", "      display: inline-block;", "      width: 1em;", "      font-size: 1.35em;", "      margin-top: -3px;", "    }", "", "    > .-filename {", "      flex-grow: 1;", "    }", "", "    > .-githubLink {", "      float: right;", "    }", "  }", "", "  > pre {", "    margin-top: 0;", "", "    > code.hljs {", "      .u-unbleed; // get the declarations from .u-unbleed", "", "      font-size: 14px;", "      font-family: monospace;", "      //background: #fafafa;", "    }", "  }", "", "  &:not(:last-child) {", "", "    > pre {", "      margin-bottom: 0;", "    }", "  }", "", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/codesnippets/CodeSnippets.scala", "CodeSnippets.scala", "scala".asInstanceOf[LanguageName], 8, 32, "codesnippets/object", List("object CodeSnippets {", "", "  JSImportSideEffect(\"@find/**/CodeSnippets.less\")", "", "  def apply(", "    snippets: GeneratedSnippets.type => List[CodeSnippet],", "    caption: String | Unit = (),", "    asParagraph: Boolean = false,", "    startExpanded: CodeSnippet => Boolean = _ => true", "  ): HtmlElement = {", "    val _snippets = snippets(GeneratedSnippets)", "    val tag = if (asParagraph) p else div // Example of using dynamic tag", "    tag(", "      cls(\"CodeSnippets\"),", "      (caption, asParagraph) match {", "        case (str: String, _) => str", "        case ((), true) => emptyNode", "        case ((), false) => if (_snippets.length == 1) \"Source:\" else \"Sources:\"", "      },", "      _snippets.map { snippet =>", "        CodeSnippet.render(snippet, startExpanded(snippet))", "      }", "    )", "  }", "}")),
  )
  
  val `codesnippets/precompile` = List(
    CodeSnippet("./build.sbt", "build.sbt", "scala".asInstanceOf[LanguageName], 101, 111, "codesnippets/precompile", List(".settings(", "  precompile := {", "    CodeSnippetsGenerator.generate(", "      rootPath = java.nio.file.Path.of(\".\"),", "      targetPath = java.nio.file.Path.of(\"client/src/main/scala/com/raquo/app/codesnippets/generated\"),", "      packageName = \"com.raquo.app.codesnippets.generated\",", "      objectName = \"GeneratedSnippets\"", "    )", "  },", "  (Compile / compile) := ((Compile / compile) dependsOn precompile).value", ")")),
    CodeSnippet("./build.sbt", "build.sbt", "scala".asInstanceOf[LanguageName], 128, 128, "codesnippets/precompile", List("lazy val precompile = taskKey[Unit](\"runs our own pre-compile tasks\")")),
  )
  
  val `codesnippets/usage` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/CodeSnippetsView.scala", "CodeSnippetsView.scala", "scala".asInstanceOf[LanguageName], 13, 13, "codesnippets/usage", List("CodeSnippets(_.`hello world`, asParagraph = true),")),
  )
  
  val `compile-time-build.sbt` = List(
    CodeSnippet("./project/build.sbt", "build.sbt", "scala".asInstanceOf[LanguageName], 2, 14, "compile-time-build.sbt", List("// #Note this is /project/build.sbt, it is used to build the build", "//  Back out of this inception, see /build.sbt for the main build config.", "", "lazy val root = (project in file(\".\"))", "  .settings(", "    // Compile-time dependencies", "    // - Unlike regular dependencies, these are available in build.sbt", "    // - We use a source generator from Scala DOM Types", "    //   to generate code snippets for the frontend at compile time.", "    libraryDependencies ++= Seq(", "      \"com.raquo\" %% \"domtypes\" % \"17.1.0\"", "    )", "  )")),
  )
  
  val `controlled` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/ControlledInputsView.scala", "ControlledInputsView.scala", "scala".asInstanceOf[LanguageName], 26, 56, "controlled", List("val zipVar = Var(\"\")", "form(", "  appStyles,", "  onSubmit", "    .preventDefault", "    .mapTo(zipVar.now()) --> (zip => dom.window.alert(zip)),", "  p(", "    label(\"Zip code: \"),", "    input(", "      placeholder(\"12345\"),", "      maxLength(5), // HTML can help block some undesired input", "      controlled(", "        value <-- zipVar,", "        onInput.mapToValue.filter(_.forall(Character.isDigit)) --> zipVar", "      )", "    ),", "    button(", "      typ(\"button\"), // HTML buttons are of type \"submit\" by default", "      \"Set SF zip code\",", "      onClick.mapTo(\"94110\") --> zipVar", "    )", "  ),", "  p(", "    \"Your zip code: \",", "    child.text <-- zipVar", "  ),", "  // Using the form element's onSubmit in this example,", "  // but you could also respond on button click if you", "  // don't want a form element", "  button(typ(\"submit\"), \"Submit\")", ")")),
  )
  
  val `counter` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/CounterView.scala", "CounterView.scala", "scala".asInstanceOf[LanguageName], 12, 12, "counter", List("Counter(label = \"Foo\", initialStep = 1),")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/CounterView.scala", "CounterView.scala", "scala".asInstanceOf[LanguageName], 19, 44, "counter", List("def Counter(label: String, initialStep: Int): HtmlElement = {", "  val allowedSteps = List(1, 2, 3, 5, 10)", "  val stepVar = Var(initialStep)", "  val diffBus = new EventBus[Int]", "  val countSignal: Signal[Int] = diffBus.events.scanLeft(initial = 0)(_ + _)", "", "  div(", "    cls(\"Counter\"),", "    p(", "      \"Step: \",", "      select(", "        value <-- stepVar.signal.map(_.toString),", "        onChange.mapToValue.map(_.toInt) --> stepVar,", "        allowedSteps.map { step => option(value := step.toString, step) }", "      )", "    ),", "    p(", "      label + \": \",", "      b(child.text <-- countSignal),", "      \" \",", "      // Two different ways to get stepVar's value:", "      button(\"–\", onClick.mapTo(-1 * stepVar.now()) --> diffBus),", "      button(\"+\", onClick.compose(_.sample(stepVar.signal)) --> diffBus)", "    )", "  )", "}")),
  )
  
  val `form-state` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/FormStateView.scala", "FormStateView.scala", "scala".asInstanceOf[LanguageName], 9, 87, "form-state", List("object FormStateView {", "", "  // Find and import the LESS (CSS) file for this component. See globResolverPlugin and importSideEffectPlugin", "  JSImportSideEffect(\"@find/**/FormStateView.less\")", "", "  private val stateVar = Var(FormState())", "", "  private val zipWriter = stateVar.updater[String]((state, zip) => state.copy(zip = zip))", "", "  private val descriptionWriter = stateVar.updater[String]((state, desc) => state.copy(city = desc))", "", "  private val submitter = Observer[FormState] { state =>", "    if (state.hasErrors) {", "      stateVar.update(_.copy(showErrors = true))", "    } else {", "      dom.window.alert(s\"Zip: ${state.zip}; Description: ${state.city}\")", "    }", "  }", "", "  def apply(): HtmlElement = {", "    div(", "      cls(\"FormStateView\"),", "      form(", "        onSubmit", "          .preventDefault", "          .mapTo(stateVar.now()) --> submitter,", "", "        renderInputRow(_.cityError)(", "          label(\"City: \"),", "          input(", "            controlled(", "              value <-- stateVar.signal.map(_.city),", "              onInput.mapToValue --> descriptionWriter", "            )", "          ),", "          button(", "            typ(\"button\"), // \"submit\" is the default in HTML", "            \"Clear\",", "            onClick.mapTo(\"\") --> descriptionWriter", "          )", "        ),", "", "        renderInputRow(_.zipError)(", "          label(\"Zip code: \"),", "          input(", "            cls(\"-zipCodeInput\"),", "            placeholder(\"12345\"),", "            controlled(", "              value <-- stateVar.signal.map(_.zip),", "              onInput.mapToValue.filter(_.forall(Character.isDigit)) --> zipWriter", "            )", "          ),", "          button(", "            typ(\"button\"), // default button type in HTML is \"submit\", we don't want it", "            \"Set SF\",", "            onClick.mapTo(\"94110\") --> zipWriter", "          )", "        ),", "        ", "        button(typ(\"submit\"), \"Submit\")", "      ),", "      CodeSnippets(_.`form-state`) // Renders the code snippet that you can see online.", "    )", "  }", "", "  private def renderInputRow(", "    error: FormState => Option[String]", "  )(", "    mods: Modifier[HtmlElement]*", "  ): HtmlElement = {", "    val errorSignal = stateVar.signal.map(_.displayError(error))", "    div(", "      cls(\"-inputRow\"),", "      cls.toggle(\"x-hasError\") <-- errorSignal.map(_.nonEmpty),", "      mods,", "      child.maybe <-- errorSignal.map(_.map(err => div(cls(\"-error\"), err)))", "    )", "  }", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/FormStateView.less", "FormStateView.less", "less".asInstanceOf[LanguageName], 2, 47, "form-state", List(".FormStateView {", "", "  > h1 {", "    margin-bottom: 35px;", "  }", "", "  > form {", "", "    > .-inputRow {", "      margin: 10px -10px;", "      padding: 10px;", "", "      &.x-hasError {", "        background: #ffeeee;", "      }", "", "      > .-error {", "        margin-top: 5px;", "        color: red;", "        font-size: 90%;", "      }", "", "      > input, > button {", "        margin: 0 5px;", "      }", "", "      > input {", "        padding: 4px 2px;", "        max-width: 80px;", "", "        &.-zipCodeInput {", "          max-width: 60px;", "        }", "      }", "", "      > button {", "        padding: 4px 8px;", "      }", "    }", "", "    > button[type=\"submit\"] {", "      margin-top: 20px;", "      padding: 4px 8px;", "    }", "  }", "}")),
  )
  
  val `hello world` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/HelloWorldView.scala", "HelloWorldView.scala", "scala".asInstanceOf[LanguageName], 23, 34, "hello world", List("val nameVar = Var(initial = \"world\")", "div(", "  label(\"Your name: \"),", "  input(", "    placeholder := \"Enter your name here\",", "    onInput.mapToValue --> nameVar", "  ),", "  p(", "    \"Hello, \",", "    child.text <-- nameVar.signal.map(_.toUpperCase)", "  )", ")")),
  )
  
  val `network/ajax-tester` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/NetworkRequestsView.scala", "NetworkRequestsView.scala", "scala".asInstanceOf[LanguageName], 30, 30, "network/ajax-tester", List("AjaxTester.app,")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/NetworkRequestsView.scala", "NetworkRequestsView.scala", "scala".asInstanceOf[LanguageName], 114, 193, "network/ajax-tester", List("object AjaxTester {", "", "  // Example based on plain JS version: http://plnkr.co/edit/ycQbBr0vr7ceUP2p6PHy?preview", "", "  case class AjaxOption(name: String, baseUrl: String, bustCache: Boolean = false) {", "    def id: String = \"ajax-\" + name", "    def url: String = if (bustCache) baseUrl + \"?t=\" + js.Date.now() else baseUrl", "  }", "", "  private val options = List(", "    AjaxOption(\"Valid Ajax request\", \"https://api.zippopotam.us/us/90210\"),", "    AjaxOption(\"Download 10MB file (gives you time to abort)\", \"https://cachefly.cachefly.net/10mb.test\", bustCache = true),", "    AjaxOption(\"Download 100MB file (gives you time to abort)\", \"https://cachefly.cachefly.net/100mb.test\", bustCache = true),", "    AjaxOption(\"URL that will fail due to invalid domain\", \"https://api.zippopotam.uxx/us/90210\"),", "    AjaxOption(\"URL that will fail due to CORS restriction\", \"https://unsplash.com/photos/KDYcgCEoFcY/download?force=true\")", "  )", "  private val selectedOptionVar = Var(options.head)", "  private val pendingRequestVar = Var[Option[dom.XMLHttpRequest]](None)", "  private val eventsVar = Var(List.empty[String])", "", "  val app: HtmlElement = form(", "    h2(\"Ajax API tester\", titleLink(\"ajax-tester\")),", "    options.map { option =>", "      div(", "        input(", "          typ(\"radio\"),", "          idAttr(option.id),", "          nameAttr(\"ajaxOption\"),", "          checked <-- selectedOptionVar.signal.map(_ == option),", "          onChange.mapTo(option) --> selectedOptionVar", "        ),", "        label(forId(option.id), \" \" + option.name)", "      )", "    },", "    br(),", "    div(", "      button(", "        typ(\"button\"),", "        \"Send\",", "        inContext { thisNode =>", "          val clickStream = thisNode.events(onClick).sample(selectedOptionVar.signal)", "          val responseStream = clickStream.flatMap { opt =>", "            AjaxStream", "              .get(", "                url = opt.url,", "                // These observers are optional, we're just using them for demo", "                requestObserver = pendingRequestVar.someWriter,", "                progressObserver = eventsVar.updater { (evs, p) =>", "                  val ev = p._2", "                  evs :+ s\"Progress: ${ev.loaded} / ${ev.total} (lengthComputable = ${ev.lengthComputable})\"", "                },", "                readyStateChangeObserver = eventsVar.updater { (evs, req) =>", "                  evs :+ s\"Ready state: ${req.readyState}\"", "                }", "              )", "              .map(\"Response: \" + _.responseText)", "              .recover { case err: AjaxStreamError => Some(err.getMessage) }", "          }", "", "          List(", "            clickStream.map(opt => List(s\"Starting: GET ${opt.url}\")) --> eventsVar,", "            responseStream --> eventsVar.updater[String](_ :+ _)", "          )", "        }", "      ),", "      \" \",", "      button(", "        typ(\"button\"),", "        \"Abort\",", "        onClick --> (_ => pendingRequestVar.now().foreach(_.abort()))", "      )", "    ),", "    div(", "      fontSize.em(0.8),", "      br(),", "      b(\"Events:\"),", "      div(children <-- eventsVar.signal.map(_.map(div(_))))", "    )", "  )", "}")),
  )
  
  val `network/fetch-tester` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/NetworkRequestsView.scala", "NetworkRequestsView.scala", "scala".asInstanceOf[LanguageName], 26, 26, "network/fetch-tester", List("FetchTester(),")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/NetworkRequestsView.scala", "NetworkRequestsView.scala", "scala".asInstanceOf[LanguageName], 37, 110, "network/fetch-tester", List("object FetchTester {", "", "  // Example based on plain JS version: http://plnkr.co/edit/ycQbBr0vr7ceUP2p6PHy?preview", "", "  case class FetchOption(name: String, baseUrl: String, bustCache: Boolean = false) {", "    def id: String = \"fetch-\" + name", "    def url: String = if (bustCache) baseUrl + \"?t=\" + js.Date.now() else baseUrl", "  }", "", "  private val options = List(", "    FetchOption(\"Valid Fetch request\", \"https://api.zippopotam.us/us/90210\"),", "    FetchOption(\"Download 10MB file (gives you time to abort)\", \"https://cachefly.cachefly.net/10mb.test\", bustCache = true),", "    FetchOption(\"Download 100MB file (gives you time to abort)\", \"https://cachefly.cachefly.net/100mb.test\", bustCache = true),", "    FetchOption(\"URL that will fail due to invalid domain\", \"https://api.zippopotam.uxx/us/90210\"),", "    FetchOption(\"URL that will fail due to CORS restriction\", \"https://unsplash.com/photos/KDYcgCEoFcY/download?force=true\")", "  )", "", "  def apply(): HtmlElement = {", "    val selectedOptionVar = Var(options.head)", "    val eventsVar = Var(List.empty[String])", "    val (abortStream, abort) = EventStream.withUnitCallback", "", "    form(", "      h2(\"Fetch API tester\", titleLink(\"fetch-tester\")),", "      options.map { option =>", "        div(", "          input(", "            idAttr(option.id),", "            typ(\"radio\"),", "            nameAttr(\"fetchOption\"),", "            checked <-- selectedOptionVar.signal.map(_ == option),", "            onChange.mapTo(option) --> selectedOptionVar,", "          ),", "          label(forId(option.id), \" \" + option.name)", "        )", "      },", "      br(),", "      div(", "        button(", "          typ(\"button\"),", "          \"Send\",", "          inContext { thisNode =>", "            val clicks = thisNode.events(onClick).sample(selectedOptionVar.signal)", "            val responses = clicks.flatMap { opt =>", "              FetchStream.get(url = opt.url, _.abortStream(abortStream))", "                .map(resp => if (resp.length >= 1000) resp.substring(0, 1000) else resp)", "                .map(\"Response (first 1000 chars): \" + _)", "                .recover { case err: Throwable => Some(err.getMessage) }", "            }", "", "            List(", "              clicks.map(opt => List(s\"Starting: GET ${opt.url}\")) --> eventsVar,", "              responses --> eventsVar.updater[String](_ :+ _)", "            )", "          }", "        ),", "        \" \",", "        button(", "          typ(\"button\"),", "          \"Abort\",", "          // Note: using advanced Laminar syntax feature – see https://laminar.dev/documentation#-unit-sinks", "          onClick --> abort()", "          // onClick.mapTo(()) --> abort // Alternative syntax", "        )", "      ),", "      div(", "        fontSize.em(0.8),", "        br(),", "        b(\"Events:\"),", "        div(children <-- eventsVar.signal.map(_.map(div(_))))", "      )", "    )", "  }", "}")),
  )
  
  val `shoelace/buttons-and-icons` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 56, 84, "shoelace/buttons-and-icons", List("Button.of(", "  _.variant.primary,", "  _.size.large,", "  _ => \"Settings\",", "  _ => onClick --> { _ => dom.window.alert(\"Clicked\") },", "  _.slots.prefix(", "    Icon.of(", "      _.name(\"gear-fill\"),", "      _.fontSize.em(1.3), // this is how you set icon size in shoelace", "    )", "  )", "),", "\" \",", "Button.of(", "  _ => \"Reload\",", "  _ => onClick --> { _ => dom.window.alert(\"Clicked\") },", "  _.slots.prefix(", "    Icon.of(_.name(\"arrow-counterclockwise\"))", "  )", "),", "\" \",", "Button.of(", "  _.variant.success,", "  _ => \"User\",", "  _ => onClick --> { _ => dom.window.alert(\"Clicked\") },", "  _.slots.suffix(", "    Icon.of(_.name(\"person-fill\"))", "  )", ")")),
  )
  
  val `shoelace/components` = List(
    CodeSnippet("./client/src/main/scala/vendor/shoelace/CommonKeys.scala", "CommonKeys.scala", "scala".asInstanceOf[LanguageName], 9, 53, "shoelace/components", List("/** Typical events / properties / etc. defined on Shoelace web components.", "  * We selectively export them from this object into individual components", "  * that define them.", "  */", "object CommonKeys extends CommonTypes {", "", "  /** Emitted when the control’s \"state\" changes, similar to the browser's `change` event. */", "  lazy val onChange: EventProp[dom.Event] = eventProp(\"sl-change\")", "", "  /** Emitted when the control receives input, similar to the browser's `input` event */", "  lazy val onInput: EventProp[dom.Event] = eventProp(\"sl-input\")", "", "  /** Emitted when the component loses focus. */", "  lazy val onBlur: EventProp[dom.Event] = eventProp(\"sl-blur\")", "", "  /** Emitted when the component obtains focus. */", "  lazy val onFocus: EventProp[dom.Event] = eventProp(\"sl-focus\")", "", "  /** Emitted when the form control has been checked for validity and its constraints aren’t satisfied. */", "  lazy val onInvalid: EventProp[dom.Event] = eventProp(\"sl-invalid\")", "  ", "  object size extends HtmlPropOf[String](\"size\", StringAsIsCodec) {", "", "    lazy val small: PropSetterOf[String] = size(\"small\")", "", "    lazy val medium: PropSetterOf[String] = size(\"medium\")", "", "    lazy val large: PropSetterOf[String] = size(\"large\")", "  }", "", "  object variant extends HtmlProp[String, String](\"variant\", StringAsIsCodec) {", "", "    lazy val default: PropSetterOf[String] = variant(\"default\")", "", "    lazy val primary: PropSetterOf[String] = variant(\"primary\")", "", "    lazy val success: PropSetterOf[String] = variant(\"success\")", "", "    lazy val neutral: PropSetterOf[String] = variant(\"neutral\")", "", "    lazy val warning: PropSetterOf[String] = variant(\"warning\")", "", "    lazy val danger: PropSetterOf[String] = variant(\"danger\")", "  }", "}")),
    CodeSnippet("./client/src/main/scala/vendor/shoelace/Slot.scala", "Slot.scala", "scala".asInstanceOf[LanguageName], 6, 22, "shoelace/components", List("/** A [[Slot]] represents a special child component of web components.", "  *", "  * Many web components reserve a `slot` attribute for some of their children, with a particular meaning.", "  *", "  * In order to have compile-time fixed slots for your elements, you can define a variable with their name, and it will", "  * allow you to attach child in a simple manner.", "  */", "final class Slot(name: String) {", "", "  def :=(element: HtmlElement): HtmlElement = element.amend(slot := name)", "", "  @inline def apply(element: HtmlElement): HtmlElement = (this := element)", "", "  def <--(elementS: Source[HtmlElement]): Inserter.Base =", "    child <-- elementS.toObservable.map(_.amend(slot := name))", "", "}")),
    CodeSnippet("./client/src/main/scala/vendor/shoelace/WebComponent.scala", "WebComponent.scala", "scala".asInstanceOf[LanguageName], 13, 55, "shoelace/components", List("/** Base trait for all web components. */", "trait WebComponent(tagName: String) extends CommonTypes {", "", "  type Ref <: dom.HTMLElement", "", "  type El = ReactiveHtmlElement[Ref]", "", "  type ModFunction = this.type => Mod[El]", "", "  type ComponentMod = ModFunction | Mod[El]", "", "  protected def tag: HtmlTag[Ref] = htmlTag(tagName)", "  ", "  /** Instantiate this component using the specified modifiers.", "    *", "    * Modifiers can be the usual Laminar modifiers, or they can be functions from this component to a modifier. Allowing", "    * these functions is very practical to access the reactive attributes of the component, with the `_.reactiveAttr`", "    * syntax.", "    *", "    * Scala 2, use the `of` method. See https://github.com/sherpal/LaminarSAPUI5Bindings#remark-for-scala-213-users", "    * IntelliJ users, consider using the `of` method. See https://youtrack.jetbrains.com/issue/SCL-21713/Method-accepting-a-union-of-types-that-includes-a-Function-type-problems-with-go-to-definition-type-hints-and-autocomplete-Scala", "    */", "  final def apply(mods: ComponentMod*): El = {", "    val el = tag()", "    Transaction.onStart.shared {", "      mods.foreach {", "        case mod: Mod[_ >: El]                        => mod(el)", "        case modFn: Function[_ >: this.type, _ <: El] => modFn(this)(el)", "      }", "    }", "    el", "  }", "", "  /** Same as [[apply]], but accept only [[ModFunction]]s */", "  final def of(mods: ModFunction*): El = {", "    val el = tag()", "    Transaction.onStart.shared {", "      mods.foreach(_(this)(el))", "    }", "    el", "  }", "", "}")),
    CodeSnippet("./client/src/main/scala/vendor/shoelace/components/Icon.scala", "Icon.scala", "scala".asInstanceOf[LanguageName], 13, 80, "shoelace/components", List("/** [[https://shoelace.style/components/icon Shoelace docs]] */", "object Icon extends WebComponent(\"sl-icon\") { self =>", "", "  JSImportSideEffect(\"@shoelace-style/shoelace/dist/components/icon/icon.js\")", "", "  type Ref = dom.HTMLButtonElement", "", "", "  // -- Events --", "", "  /** Emitted when the icon has loaded.", "    * When using spriteSheet: true this will not emit.", "    */", "  lazy val onLoad: EventProp[dom.Event] = eventProp(\"sl-load\")", "", "  /** Emitted when the icon fails to load due to an error.", "    * When using spriteSheet: true this will not emit.", "    */", "  lazy val onError: EventProp[dom.Event] = eventProp(\"sl-error\")", "", "", "  // -- Props --", "", "  /** The name of the icon to draw. Available names depend on the icon library being used. */", "  lazy val name: HtmlPropOf[String] = stringProp(\"name\")", "", "  // #TODO Is this XSS warning specific to Shoelace? https://developer.mozilla.org/en-US/docs/Web/SVG/SVG_as_an_Image", "  //  Should we name this `unsafeSrc`?", "  /** An external URL of an SVG file.", "    *", "    * Warning!!! Be sure you trust the content you are including, as it", "    * will be executed as code, and can result in XSS attacks.", "    */", "  lazy val src: HtmlAttr[String] = stringAttr(\"src\")", "", "  /** An alternate description to use for assistive devices.", "    * If omitted, the icon will be considered presentational", "    * and ignored by assistive devices.", "    */", "  lazy val label: HtmlAttr[String] = stringAttr(\"label\")", "", "  /** The name of a registered custom icon library. */", "  lazy val library: HtmlPropOf[String] = stringProp(\"library\")", "", "  /** Icons are sized relative to the current font size.", "    * To change their size, set the font-size property", "    * on the icon itself or on a parent element.", "    */", "  lazy val fontSize: StyleProp[String] with s.FontSize = L.fontSize", "", "", "  // -- Slots --", "", "  @inline def noSlots: Unit = ()", "", "", "  // -- CSS Parts --", "", "  object parts {", "", "    /** The internal SVG element. */", "    lazy val svg: String = \"svg\"", "", "    /** The element generated when using spriteSheet: true */", "    lazy val use: String = \"use\"", "  }", "", "}")),
    CodeSnippet("./client/src/main/scala/vendor/shoelace/components/Switch.scala", "Switch.scala", "scala".asInstanceOf[LanguageName], 13, 63, "shoelace/components", List("/** [[https://shoelace.style/components/switch Shoelace docs]] */", "object Switch extends WebComponent(\"sl-switch\") { self =>", "", "  JSImportSideEffect(\"@shoelace-style/shoelace/dist/components/switch/switch.js\")", "", "  type Ref = dom.HTMLInputElement with HasGetForm", "", "", "  // -- Events --", "", "  export CommonKeys.{onChange, onInput, onBlur, onFocus, onInvalid}", "", "", "  // -- Props --", "", "  export L.{nameAttr => name, value, disabled, required, checked, defaultChecked, formId}", "", "", "  // -- Slots --", "", "  @inline def noSlots: Unit = ()", "", "", "  // -- CSS Custom Properties", "", "  // BEGIN[shoelace/css-custom-properties]", "  lazy val width: StyleProp[String] with s.Auto with u.Length[DSP, Int] = lengthAutoStyle(\"--width\")", "", "  lazy val height: StyleProp[String] with s.Auto with u.Length[DSP, Int] = lengthAutoStyle(\"--height\")", "", "  lazy val thumbSize: StyleProp[String] with s.Auto with u.Length[DSP, Int] = lengthAutoStyle(\"--thumb-size\")", "  // END[shoelace/css-custom-properties]", "", "  // -- CSS Parts --", "", "  object parts {", "", "    /** The component’s base wrapper. */", "    val base: String = \"base\"", "", "    /** The control that houses the switch’s thumb. */", "    val control: String = \"control\"", "", "    /** The switch’s thumb. */", "    val thumb: String = \"thumb\"", "", "    /** The switch’s label. */", "    val label: String = \"label\"", "  }", "", "}")),
    CodeSnippet("./client/src/main/scala/vendor/shoelace/components/Button.scala", "Button.scala", "scala".asInstanceOf[LanguageName], 14, 106, "shoelace/components", List("/** [[https://shoelace.style/components/button Shoelace docs]] */", "object Button extends WebComponent(\"sl-button\") { self =>", "", "  JSImportSideEffect(\"@shoelace-style/shoelace/dist/components/button/button.js\")", "", "  type Ref = dom.HTMLButtonElement with HasGetForm", "", "", "  // -- Events --", "", "  // You can use the regular onClick, this just also makes it available contextually on Button,", "  // letting you say `_.onClick --> ...` (and also see this onClick in autocomplete after `_.`)", "  export L.onClick", "", "  export CommonKeys.{onBlur, onFocus, onInvalid}", "", "", "  // -- Props --", "", "  export CommonKeys.{size, variant}", "", "  /** Draws the button with a caret. Used to indicate that the button triggers a dropdown menu or similar behavior. */", "  lazy val caret: HtmlPropOf[Boolean] = boolProp(\"caret\")", "", "  export L.{disabled, typ, tpe, nameAttr => name, value}", "  export L.{formId, formAction, formEncType, formMethod, formNoValidate, formTarget}", "", "  /** Draws the button in a loading state. */", "  lazy val loading: HtmlPropOf[Boolean] = boolProp(\"loading\")", "", "  /** Draws an outlined button. */", "  lazy val outline: HtmlPropOf[Boolean] = boolProp(\"outline\")", "", "  /** Draws a pill-style button with rounded edges. */", "  lazy val pill: HtmlPropOf[Boolean] = boolProp(\"pill\")", "", "  /** Draws a circular icon button. When this attribute is present, the button expects a single <sl-icon> in the default slot. */", "  lazy val circle: HtmlPropOf[Boolean] = boolProp(\"circle\")", "", "  /** When set, the underlying button will be rendered as an <a> with this href instead of a <button>.", "    * Warning: Note that in this case, our `Ref` type will be incorrect.", "    */", "  lazy val href: HtmlAttr[String] = stringAttr(\"href\")", "", "  /** Tells the browser where to open the link. Only used when href is present. */", "  lazy val target: HtmlAttr[String] = stringAttr(\"target\")", "", "  /** When using href, this attribute will map to the underlying link’s rel attribute.", "    * Unlike regular links, the default is noreferrer noopener to prevent security exploits.", "    * However, if you’re using target to point to a specific tab/window, this will prevent", "    * that from working correctly. You can remove or change the default value by setting the", "    * attribute to an empty string or a value of your choice, respectively.", "    */", "  lazy val rel: HtmlAttr[String] = stringAttr(\"rel\")", "", "  /** Tells the browser to download the linked file as this filename. Only used when href is present. */", "  lazy val download: HtmlAttr[String] = stringAttr(\"download\")", "", "", "  // -- Slots --", "", "  object slots {", "", "    lazy val prefix: Slot = Slot(\"prefix\")", "", "    lazy val suffix: Slot = Slot(\"suffix\")", "  }", "", "", "  // -- CSS parts --", "", "  object parts {", "", "    /** The component’s base wrapper. */", "    val base: String = \"base\"", "", "    /** The container that wraps the prefix. */", "    val prefix: String = \"prefix\"", "", "    /** The button’s label. */", "    val label: String = \"label\"", "", "    /** The container that wraps the suffix. */", "    val suffix: String = \"suffix\"", "", "    /** The button’s caret icon, an <sl-icon> element. */", "    val caret: String = \"caret\"", "", "    /** The spinner that shows when the button is in the loading state. */", "    val spinner: String = \"spinner\"", "  }", "", "}")),
  )
  
  val `shoelace/css-custom-properties` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 154, 160, "shoelace/css-custom-properties", List("Switch.of(),", "\" \",", "Switch.of(", "  _.width.px(100),", "  _.height.px(10),", "  _.thumbSize.px(14)", "),")),
    CodeSnippet("./client/src/main/scala/vendor/shoelace/components/Switch.scala", "Switch.scala", "scala".asInstanceOf[LanguageName], 39, 43, "shoelace/css-custom-properties", List("lazy val width: StyleProp[String] with s.Auto with u.Length[DSP, Int] = lengthAutoStyle(\"--width\")", "", "lazy val height: StyleProp[String] with s.Auto with u.Length[DSP, Int] = lengthAutoStyle(\"--height\")", "", "lazy val thumbSize: StyleProp[String] with s.Auto with u.Length[DSP, Int] = lengthAutoStyle(\"--thumb-size\")")),
  )
  
  val `shoelace/css-parts` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.less", "ShoelaceWebComponentsView.less", "less".asInstanceOf[LanguageName], 9, 75, "shoelace/css-parts", List("// Customization using CSS parts as described in https://shoelace.style/getting-started/customizing#css-parts", "// Except I used LESS nesting syntax, and also colored the icon.", ".tomato-button {", "", "  &::part(base) {", "    background: var(--sl-color-neutral-0);", "    border: solid 1px tomato;", "", "    &:hover {", "      background: rgba(255, 99, 71, 0.1);", "    }", "", "    &:active {", "      background: rgba(255, 99, 71, 0.2);", "    }", "", "    &:focus-visible {", "      box-shadow: 0 0 0 3px rgba(255, 99, 71, 0.33);", "    }", "  }", "", "  &::part(label) {", "    color: tomato;", "  }", "", "  // Icon color to match", "  &::part(prefix),", "  &::part(suffix) {", "    color: tomato;", "    font-size: 1.3em;", "  }", "}", "", "// Styles the pink button, from https://shoelace.style/components/button#styling-buttons", "sl-button.pink::part(base) {", "  /* Set design tokens for height and border width */", "  --sl-input-height-medium: 48px;", "  --sl-input-border-width: 4px;", "", "  border-radius: 0;", "  background-color: #ff1493;", "  border-top-color: #ff7ac1;", "  border-left-color: #ff7ac1;", "  border-bottom-color: #ad005c;", "  border-right-color: #ad005c;", "  color: white;", "  font-size: 1.125rem;", "  box-shadow: 0 2px 10px #0002;", "  transition: var(--sl-transition-medium) transform ease, var(--sl-transition-medium) border ease;", "", "  &:hover {", "    transform: scale(1.05) rotate(-1deg);", "  }", "", "  &:active {", "    border-top-color: #ad005c;", "    border-right-color: #ff7ac1;", "    border-bottom-color: #ff7ac1;", "    border-left-color: #ad005c;", "    transform: scale(1.05) rotate(-1deg) translateY(2px);", "  }", "", "  &:focus-visible {", "    outline: dashed 2px deeppink;", "    outline-offset: 4px;", "  }", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 132, 145, "shoelace/css-parts", List("Button.of(", "  _ => cls(\"tomato-button\"),", "  _ => \"Tasteful tomato button\",", "  _ => onClick --> { _ => dom.window.alert(\"Clicked\") },", "  _.slots.prefix(", "    Icon.of(_.name(\"check-circle-fill\"))", "  )", "),", "\" \",", "Button.of(", "  _ => cls(\"pink\"),", "  _ => \"Crazy pink button\",", "  _ => onClick --> { _ => dom.window.alert(\"Clicked\") }", "),")),
  )
  
  val `shoelace/design-tokens` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.less", "ShoelaceWebComponentsView.less", "less".asInstanceOf[LanguageName], 79, 95, "shoelace/design-tokens", List(".indigoPrimaryColor {", "  // Any elements that match `.ShoelaceWebComponentsView .indigoPrimaryColor`,", "  // and any of their descendants, will have indigo colors as primary colors.", "  // Read about CSS custom properties:", "  // https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties", "  --sl-color-primary-50: var(--sl-color-indigo-50);", "  --sl-color-primary-100: var(--sl-color-indigo-100);", "  --sl-color-primary-200: var(--sl-color-indigo-200);", "  --sl-color-primary-300: var(--sl-color-indigo-300);", "  --sl-color-primary-400: var(--sl-color-indigo-400);", "  --sl-color-primary-500: var(--sl-color-indigo-500);", "  --sl-color-primary-600: var(--sl-color-indigo-600);", "  --sl-color-primary-700: var(--sl-color-indigo-700);", "  --sl-color-primary-800: var(--sl-color-indigo-800);", "  --sl-color-primary-900: var(--sl-color-indigo-900);", "  --sl-color-primary-950: var(--sl-color-indigo-950);", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 117, 124, "shoelace/design-tokens", List("p(", "  cls(\"indigoPrimaryColor\"), // you could also apply this class directly to the button.", "  Button.of(", "    _.variant.primary,", "    _ => \"Primary indigo\",", "    _ => onClick --> { _ => dom.window.alert(\"Clicked\") }", "  )", "),")),
  )
  
  val `shoelace/themes` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.less", "ShoelaceWebComponentsView.less", "less".asInstanceOf[LanguageName], 2, 5, "shoelace/themes", List(".ShoelaceWebComponentsView {", "  // Basic light & dark theme support for these two properties of this non-Shoelace element.", "  color: var(--sl-color-neutral-1000);", "  background: var(--sl-color-neutral-0);")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 18, 19, "shoelace/themes", List("JSImportSideEffect(\"@shoelace-style/shoelace/dist/themes/light.css\")", "JSImportSideEffect(\"@shoelace-style/shoelace/dist/themes/dark.css\")")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 30, 30, "shoelace/themes", List("val isDarkVar = Var(false)")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 96, 96, "shoelace/themes", List("cls <-- isDarkVar.signal.map(if (_) \"sl-theme-dark\" else \"sl-theme-light\"),")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/ShoelaceWebComponentsView.scala", "ShoelaceWebComponentsView.scala", "scala".asInstanceOf[LanguageName], 99, 109, "shoelace/themes", List("Button.of(", "  _.variant.primary,", "  _ => child.text <-- isDarkVar.signal.map(if (_) \"Use light theme\" else \"Use dark theme\"),", "  _ => onClick.mapTo(!isDarkVar.now()) --> isDarkVar,", "  _.slots.prefix(", "    Icon.of(", "      _.name <-- isDarkVar.signal.map(if (_) \"brightness-high-fill\" else \"moon-stars-fill\"),", "      _.fontSize.em(1.3), // this is how you set icon size in shoelace", "    )", "  )", "),")),
  )
  
  val `time/basic` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/TimeView.scala", "TimeView.scala", "scala".asInstanceOf[LanguageName], 36, 48, "time/basic", List("val tickStream = EventStream.periodic(1000)", "", "div(", "  appStyles,", "  div(", "    \"Tick #: \",", "    child.text <-- tickStream.map(_.toString)", "  ),", "  div(", "    \"Random #: \",", "    child.text <-- tickStream.mapTo(scala.util.Random.nextInt() % 100)", "  )", ")")),
  )
  
  val `time/debounce` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/TimeView.scala", "TimeView.scala", "scala".asInstanceOf[LanguageName], 73, 103, "time/debounce", List("val emailRegex = new RegExp(\"^[^@]+@[^@]+\\\\.[^@]+$\")", "", "def emailError(email: String): Option[String] =", "  if (email.isEmpty)", "    Some(\"Please fill out email\")", "  else if (!emailRegex.test(email))", "    Some(\"Invalid email!\")", "  else", "    None", "", "val inputBus = new EventBus[String]", "", "val debouncedErrorStream: EventStream[Option[String]] =", "  inputBus.events", "    .debounce(1000)", "    .map(emailError)", "", "div(", "  appStyles,", "  span(", "    label(\"Your email: \"),", "    input(", "      value <-- inputBus.events,", "      onInput.mapToValue --> inputBus", "    )", "  ),", "  child <-- debouncedErrorStream.map {", "    case Some(err) => span(cls(\"u-error\"), \"Error: \" + err)", "    case None => span(cls(\"u-success\"), \"Email ok!\")", "  }", ")")),
  )
  
  val `time/delay` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/basic/TimeView.scala", "TimeView.scala", "scala".asInstanceOf[LanguageName], 54, 67, "time/delay", List("val clickBus = new EventBus[Unit]", "", "val maybeAlertStream = EventStream.merge(", "  clickBus.events.mapTo(Some(span(\"Just clicked!\"))),", "  clickBus.events.flatMap { _ =>", "    EventStream.fromValue(None, emitOnce = true).delay(500)", "  }", ")", "", "div(", "  appStyles,", "  button(onClick.mapTo(()) --> clickBus, \"Click me\"),", "  child.maybe <-- maybeAlertStream", ")")),
  )
  
  val `todomvc` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/todomvc/TodoMvcApp.scala", "TodoMvcApp.scala", "scala".asInstanceOf[LanguageName], 9, 212, "todomvc", List("object TodoMvcApp {", "", "  JSImportSideEffect(\"@find/**/TodoMvcApp.css\")", "", "  // This implementation is very loosely based on Outwatch TodoMVC, for comparison see", "  // https://github.com/clovellytech/outwatch-examples/tree/master/todomvc/src/main/scala/todomvc", "", "", "  // --- 1. Models ---", "", "  case class TodoItem(id: Int, text: String, completed: Boolean)", "", "  sealed abstract class Filter(val name: String, val passes: TodoItem => Boolean)", "", "  object ShowAll extends Filter(\"All\", _ => true)", "  object ShowActive extends Filter(\"Active\", !_.completed)", "  object ShowCompleted extends Filter(\"Completed\", _.completed)", "", "  val filters: List[Filter] = ShowAll :: ShowActive :: ShowCompleted :: Nil", "", "  sealed trait Command", "", "  case class Create(itemText: String) extends Command", "  case class UpdateText(itemId: Int, text: String) extends Command", "  case class UpdateCompleted(itemId: Int, completed: Boolean) extends Command", "  case class Delete(itemId: Int) extends Command", "  case object DeleteCompleted extends Command", "", "", "  // --- 2. State ---", "", "  // Var-s are reactive state variables suitable for both local state and redux-like global stores.", "  // Laminar uses my library Airstream as its reactive layer https://github.com/raquo/Airstream", "", "  private val itemsVar = Var(List[TodoItem]())", "  private val filterVar = Var[Filter](ShowAll)", "  private var lastId = 1 // just for auto-incrementing IDs", "", "  private val commandObserver = Observer[Command] {", "    case Create(itemText) =>", "      lastId += 1", "      if (filterVar.now() == ShowCompleted)", "        filterVar.set(ShowAll)", "      itemsVar.update(_ :+ TodoItem(id = lastId, text = itemText, completed = false))", "    case UpdateText(itemId, text) =>", "      itemsVar.update(_.map(item => if (item.id == itemId) item.copy(text = text) else item))", "    case UpdateCompleted(itemId, completed) =>", "      itemsVar.update(_.map(item => if (item.id == itemId) item.copy(completed = completed) else item))", "    case Delete(itemId) =>", "      itemsVar.update(_.filterNot(_.id == itemId))", "    case DeleteCompleted =>", "      itemsVar.update(_.filterNot(_.completed))", "  }", "", "", "  // --- 3. Views ---", "", "  lazy val node: HtmlElement = {", "    val todoItemsSignal = itemsVar", "      .signal", "      .combineWith(filterVar.signal)", "      .mapN(_ filter _.passes)", "    div(", "      div(", "        cls(\"todoapp-container u-bleed\"),", "        div(", "          cls(\"todoapp\"),", "          div(", "            cls(\"header\"),", "            h1(\"todos\"),", "            renderNewTodoInput,", "          ),", "          div(", "            hideIfNoItems,", "            cls(\"main\"),", "            ul(", "              cls(\"todo-list\"),", "              children <-- todoItemsSignal.split(_.id)(renderTodoItem)", "            )", "          ),", "          renderStatusBar", "        )", "      ),", "      CodeSnippets(_.`todomvc`)", "    )", "  }", "", "  private def renderNewTodoInput =", "    input(", "      cls(\"new-todo\"),", "      placeholder(\"What needs to be done?\"),", "      autoFocus(true),", "      onEnterPress", "        .mapToValue", "        .filter(_.nonEmpty)", "        .map(Create(_))", "        .setValue(\"\") --> commandObserver,", "      // When all we need is to clear an uncontrolled input, we can use setValue(\"\")", "      //  but we still need an observer to create the subscription, so we just use an empty one.", "      onEscapeKeyUp.setValue(\"\") --> Observer.empty", "    )", "", "  // Render a single item. Note that the result is a single element: not a stream, not some virtual DOM representation.", "  private def renderTodoItem(itemId: Int, initialTodo: TodoItem, itemSignal: Signal[TodoItem]): HtmlElement = {", "    val isEditingVar = Var(false) // Example of local state", "    val updateTextObserver = commandObserver.contramap[UpdateText] { updateCommand =>", "      isEditingVar.set(false)", "      updateCommand", "    }", "    li(", "      cls <-- itemSignal.map(item => Map(\"completed\" -> item.completed)),", "      onDblClick.filter(_ => !isEditingVar.now()).mapTo(true) --> isEditingVar.writer,", "      children <-- isEditingVar.signal.map[List[HtmlElement]] {", "        case true =>", "          val cancelObserver = isEditingVar.writer.contramap[Unit](Unit => false)", "          renderTextUpdateInput(itemId, itemSignal, updateTextObserver, cancelObserver) :: Nil", "        case false =>", "          List(", "            renderCheckboxInput(itemId, itemSignal),", "            label(child.text <-- itemSignal.map(_.text)),", "            button(", "              cls(\"destroy\"),", "              onClick.mapTo(Delete(itemId)) --> commandObserver", "            )", "          )", "      }", "    )", "  }", "", "  // Note that we pass reactive variables: `itemSignal` for reading, `updateTextObserver` for writing", "  private def renderTextUpdateInput(", "    itemId: Int,", "    itemSignal: Signal[TodoItem],", "    updateTextObserver: Observer[UpdateText],", "    cancelObserver: Observer[Unit]", "  ) =", "    input(", "      cls(\"edit\"),", "      defaultValue <-- itemSignal.map(_.text),", "      onEscapeKeyUp.mapToUnit --> cancelObserver,", "      onEnterPress.mapToValue.map(UpdateText(itemId, _)) --> updateTextObserver,", "      onBlur.mapToValue.map(UpdateText(itemId, _)) --> updateTextObserver", "    )", "", "  private def renderCheckboxInput(itemId: Int, itemSignal: Signal[TodoItem]) =", "    input(", "      cls(\"toggle\"),", "      typ(\"checkbox\"),", "      checked <-- itemSignal.map(_.completed),", "      onInput.mapToChecked.map { isChecked =>", "        UpdateCompleted(itemId, completed = isChecked)", "      } --> commandObserver", "    )", "", "  private def renderStatusBar =", "    footerTag(", "      hideIfNoItems,", "      cls(\"footer\"),", "      span(", "        cls(\"todo-count\"),", "        child.text <-- itemsVar.signal", "          .map(_.count(!_.completed))", "          .map(pluralize(_, \"item left\", \"items left\")),", "      ),", "      ul(", "        cls(\"filters\"),", "        filters.map(filter => li(renderFilterButton(filter)))", "      ),", "      child.maybe <-- itemsVar.signal.map { items =>", "        if (items.exists(ShowCompleted.passes)) Some(", "          button(", "            cls(\"clear-completed\"),", "            \"Clear completed\",", "            onClick.map(_ => DeleteCompleted) --> commandObserver", "          )", "        ) else None", "      }", "    )", "", "  private def renderFilterButton(filter: Filter) =", "    a(", "      cls.toggle(\"selected\") <-- filterVar.signal.map(_ == filter),", "      onClick.preventDefault.mapTo(filter) --> filterVar.writer,", "      filter.name", "    )", "", "  // Every little thing in Laminar can be abstracted away", "  private def hideIfNoItems: Mod[HtmlElement] =", "    display <-- itemsVar.signal.map { items =>", "      if (items.nonEmpty) \"\" else \"none\"", "    }", "", "", "  // --- Generic helpers ---", "", "  private def pluralize(num: Int, singular: String, plural: String): String =", "    s\"$num ${if (num == 1) singular else plural}\"", "", "  private val onEnterPress = onKeyPress.filter(_.keyCode == dom.KeyCode.Enter)", "", "  // Non-printable characters don't get a `keypress` event in JS,", "  // so we need to listen to `keydown` or `keyup` instead.", "  private val onEscapeKeyUp = onKeyUp.filter(_.keyCode == dom.KeyCode.Escape)", "}")),
  )
  
  val `ui5-title` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.scala", "SapUI5WebComponentsView.scala", "scala".asInstanceOf[LanguageName], 26, 29, "ui5-title", List("Title(", "  _.level := TitleLevel.H1,", "  \"SAP UI5 Web Components\"", "),")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.less", "SapUI5WebComponentsView.less", "less".asInstanceOf[LanguageName], 12, 12, "ui5-title", List("--sapGroup_TitleTextColor: #663300;")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.less", "SapUI5WebComponentsView.less", "less".asInstanceOf[LanguageName], 29, 33, "ui5-title", List("ui5-title[level=\"H1\"] {", "  font-family: Georgia, serif;", "  // Can also be achieved this way:", "  //--sapFontHeaderFamily: Georgia, serif;", "}")),
  )
  
  val `ui5/renderButtons` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.scala", "SapUI5WebComponentsView.scala", "scala".asInstanceOf[LanguageName], 71, 91, "ui5/renderButtons", List("List(", "  Button.of(", "    _ => \"CLICK ME\",", "    _ => onClick --> { _ => dom.window.alert(\"YOUR COMPLIANCE IS APPRECIATED\") }", "  ),", "  \" \",", "  Button.of(", "    _ => cls(\"x-yellow\"),", "    _ => \"Button styled via CSS\", // See SapUI5WebComponentsView.less", "    _ => onClick --> { _ => dom.window.alert(\"Ok\") }", "  ),", "  \" \",", "  Button.of(", "    _ => backgroundColor := \"green\",", "    _ => borderColor := \"green\",", "    _ => color.white,", "    _ => fontWeight.bold,", "    _ => \"Button styled via Laminar\",", "    _ => onClick --> { _ => dom.window.alert(\"Ok\") }", "  )", ")")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.less", "SapUI5WebComponentsView.less", "less".asInstanceOf[LanguageName], 42, 52, "ui5/renderButtons", List("ui5-button.x-yellow {", "  font-weight: bold;", "  color: black;", "  border: 2px solid red;", "  background: yellow;", "", "  &:hover {", "    background: red;", "    color: white;", "  }", "}")),
  )
  
  val `ui5/renderDatePicker` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.scala", "SapUI5WebComponentsView.scala", "scala".asInstanceOf[LanguageName], 99, 110, "ui5/renderDatePicker", List("val selectedDateVar: Var[String] = Var(\"2023-01-31\")", "div(", "  Label(", "    \"Currently selected: \",", "    child.text <-- selectedDateVar.signal", "  ),", "  br(),", "  DatePicker.of(", "    _ => value <-- selectedDateVar,", "    _.events.onChange.mapToValue --> selectedDateVar", "  )", ")")),
  )
  
  val `ui5/renderMultiComboBox` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/integrations/SapUI5WebComponentsView.scala", "SapUI5WebComponentsView.scala", "scala".asInstanceOf[LanguageName], 116, 141, "ui5/renderMultiComboBox", List("val countries = List(\"Argentina\", \"Australia\", \"Belgium\", \"Bulgaria\", \"Canada\", \"Columbia\", \"Croatia\", \"Denmark\", \"Canada\", \"New Zealand\", \"UK\", \"USA\")", "val selectedCountriesVar = Var(List(countries.head))", "div(", "  div(", "    Label(", "      \"Currently selected: \",", "      child.text <-- selectedCountriesVar.signal.map(_.mkString(\", \"))", "    )", "  ),", "  MultiComboBox.of(", "    _.placeholder := \"Choose your countries\",", "    _ => width.px := 300,", "    _.events.onSelectionChange.map(_.detail.items.map(_.text).toList) --> selectedCountriesVar,", "    _ => countries.map { country =>", "      MultiComboBox.item(", "        _.text := country,", "        _.selected <-- selectedCountriesVar.signal.map(_.contains(country))", "      )", "    }", "  ),", "  \" \",", "  Button(", "    onClick.mapTo(Nil) --> selectedCountriesVar,", "    \"Clear\"", "  )", ")")),
  )
  
  val `uncontrolled/form-no-vars` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/UncontrolledInputsView.scala", "UncontrolledInputsView.scala", "scala".asInstanceOf[LanguageName], 103, 124, "uncontrolled/form-no-vars", List("val inputEl = input(", "  placeholder(\"12345\"),", "  maxLength(5), // HTML can help block some undesired input", "  onInput", "    .mapToValue", "    .map(_.filter(Character.isDigit))", "    .setAsValue --> Observer.empty", ")", "", "form(", "  appStyles,", "  onSubmit", "    .preventDefault", "    .mapTo(inputEl.ref.value) --> (zip => dom.window.alert(zip)),", "  p(", "    label(\"Zip code: \"),", "    inputEl", "  ),", "  p(", "    button(typ(\"submit\"), \"Submit\")", "  )", ")")),
  )
  
  val `uncontrolled/listening` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/UncontrolledInputsView.scala", "UncontrolledInputsView.scala", "scala".asInstanceOf[LanguageName], 44, 69, "uncontrolled/listening", List("val inputTextVar = Var(\"\")", "val checkedVar = Var(false)", "div(", "  appStyles,", "  p(", "    label(\"Name: \"),", "    input(", "      onInput.mapToValue --> inputTextVar", "    )", "  ),", "  p(", "    \"You typed: \",", "    child.text <-- inputTextVar", "  ),", "  p(", "    label(\"I like to check boxes: \"),", "    input(", "      typ(\"checkbox\"),", "      onInput.mapToChecked --> checkedVar", "    )", "  ),", "  p(", "    \"You checked the box: \",", "    child.text <-- checkedVar", "  )", ")")),
  )
  
  val `uncontrolled/transforming` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/form/UncontrolledInputsView.scala", "UncontrolledInputsView.scala", "scala".asInstanceOf[LanguageName], 75, 97, "uncontrolled/transforming", List("val zipVar = Var(\"\")", "div(", "  appStyles,", "  p(", "    label(\"Zip code: \"),", "    input(", "      placeholder(\"12345\"),", "      maxLength(5), // HTML can help block some undesired input", "      onInput", "        .mapToValue", "        .map(_.filter(Character.isDigit))", "        .setAsValue --> zipVar", "    )", "  ),", "  p(", "    \"Your zip code: \",", "    child.text <-- zipVar", "  ),", "  button(", "    onClick.mapTo(zipVar.now()) --> (zip => dom.window.alert(zip)),", "    \"Submit\"", "  )", ")")),
  )
  
  val `waypoint/currentPageSignal/backToHome` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/JsApp.scala", "JsApp.scala", "scala".asInstanceOf[LanguageName], 38, 41, "waypoint/currentPageSignal/backToHome", List("child.maybe <-- JsRouter.currentPageSignal.map {", "  case HomePage => None", "  case _ => Some(h3(cls(\"-backToHome\"), a(navigateTo(HomePage), \"Back to home\")))", "},")),
  )
  
  val `waypoint/currentPageSignal/view` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/JsApp.scala", "JsApp.scala", "scala".asInstanceOf[LanguageName], 55, 55, "waypoint/currentPageSignal/view", List("child <-- views")),
  )
  
  val `waypoint/pages` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/pages.scala", "pages.scala", "scala".asInstanceOf[LanguageName], 9, 61, "waypoint/pages", List("sealed trait Page(val title: String)", "", "// In our code extending this trait means we auto-render an", "// h1 element for this page. I don't necessarily recommend this exact", "// pattern, it's just an example of using the information in the pages", "// for something other than actual URL routing.", "sealed abstract class TitledPage(title: String) extends Page(title)", "", "case object HomePage extends Page(\"Laminar Demo\")", "", "case object HelloWorldPage extends TitledPage(\"Hello world\")", "", "case object CounterPage extends TitledPage(\"Counter\")", "", "case object TimePage extends TitledPage(\"Time\")", "", "case object FormStatePage extends TitledPage(\"Form State & Validation\")", "", "case object UncontrolledInputsPage extends TitledPage(\"Uncontrolled Inputs\")", "", "case object ControlledInputsPage extends TitledPage(\"Controlled Inputs\")", "", "// This page does not extend TitledPage so that we don't", "// auto-render h1 for it, because it has its own styling", "case object TodoMvcPage extends Page(\"TodoMVC\")", "", "case class WeatherGradientPage(gradientId: String) extends Page(s\"Weather Gradient\") // #TODO update title to match content", "", "case object UI5WebComponentsPage extends Page(\"SAP UI5 Web Components\")", "", "case object ShoelaceWebComponentsPage extends Page(\"Shoelace Web Components\")", "", "case object NetworkRequestsPage extends Page(\"Network Requests\")", "", "case object WaypointRoutingPage extends Page(\"Waypoint URL Routing\")", "", "case object CodeSnippetsPage extends Page(\"Code Snippets\")", "", "case object NotFoundPage extends TitledPage(\"Page Not Found\")", "", "// This page does not have a route defined for it, to show you what happens in those cases.", "case class UnroutedPage(foo: String) extends TitledPage(s\"Unrouted Page\")", "", "// The information encoded by this codec for any given page will be", "// saved into the browser's History API navigation record, and it will", "// be retrieved if you e.g. use the browser back button to navigate to", "// this page. Keep this in mind when choosing what data to store in the", "// Page trait. You generally don't want to store fat data models here,", "// preferring identifiers like companyId instead (because if company name", "// updates, the data you saved here will get stale). On the other hand,", "// you might want to store things like last scroll position for certain", "// types of pages, and restore it when navigating back to that page.", "given pageCodec: Codec[Page] = deriveAllCodecs")),
  )
  
  val `waypoint/router` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/JsRouter.scala", "JsRouter.scala", "scala".asInstanceOf[LanguageName], 14, 74, "waypoint/router", List("", "/** See [[https://github.com/raquo/Waypoint Waypoint documentation]] for details on how frontend routing works. */", "object JsRouter extends waypoint.Router[Page](", "  routes = routes,", "  getPageTitle = _.title, // displayed in the browser tab next to favicon", "  serializePage = page => Json.encode(page).toUtf8String, // serialize page data for storage in History API log", "  deserializePage = pageStr => Json.decodeString(pageStr).to[Page].value, // deserialize the above", "  routeFallback = _ => pages.NotFoundPage", ")(", "  popStateEvents = windowEvents(_.onPopState), // this is how Waypoint avoids an explicit dependency on Laminar", "  owner = unsafeWindowOwner // this router will live as long as the window", ") {", "", "  // Instead of importing `JsRouter.*` and `pages.*` in your code,", "  // you can just import `JsRouter.*` and have both available,", "  // since you will be using them together anyway. Neat, eh?", "  export com.raquo.app.pages.*", "", "  // Note: this returns a modifier that you need to hang off a Laminar element,", "  // e.g. `a(navigateTo(HomePage), \"Back to Home\")`", "  // See https://github.com/raquo/Waypoint docs for why this modifier is useful in general.", "  // Note: for fragment ('#') URLs this isn't actually needed.", "  def navigateTo(page: Page): Binder[HtmlElement] = Binder { el =>", "    val isLinkElement = el.ref.isInstanceOf[dom.html.Anchor]", "", "    if (isLinkElement) {", "      Try(absoluteUrlForPage(page)) match {", "        case Success(url) => el.amend(href(url))", "        case Failure(err) => dom.console.error(err)", "      }", "    }", "", "    // If element is a link and user is holding a modifier while clicking:", "    //  - Do nothing, browser will open the URL in new tab / window / etc. depending on the modifier key", "    // Otherwise:", "    //  - Perform regular pushState transition", "    //  - Scroll to top of page", "", "    val onRegularClick = onClick", "      .filter(ev => !(isLinkElement && (ev.ctrlKey || ev.metaKey || ev.shiftKey || ev.altKey)))", "      .preventDefault", "", "    (onRegularClick --> { _ =>", "      pushState(page)", "      dom.window.scrollTo(0, 0) // Scroll to top of page when navigating", "    }).bind(el)", "  }", "", "  /** Add this to a h1..h6 title element to add a clickable", "    * \"#\" link that will scroll to that title.", "    * `id` is the fragment that will appear in the URL.", "    */", "  def titleLink(id: String, caption: String = \"#\"): Modifier.Base = {", "    List[Modifier.Base](", "      // Sets the id attribute of the title element into which we add this link", "      Modifier(parentEl => parentEl.ref.id = id),", "      // Creates a link and inserts it into the title", "      a(cls(\"u-titleLink\"), href(s\"#$id\"), caption)", "    )", "  }", "}")),
  )
  
  val `waypoint/routes` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/routes.scala", "routes.scala", "scala".asInstanceOf[LanguageName], 19, 40, "waypoint/routes", List("val appRoot = root / \"app\"", "", "val routes = List(", "  Route.static(HomePage, root / endOfSegments),", "  Route.static(HelloWorldPage, appRoot / \"basic\" / \"hello\" / endOfSegments),", "  Route.static(CounterPage, appRoot / \"basic\" / \"counter\" / endOfSegments),", "  Route.static(TimePage, appRoot / \"basic\" / \"time\" / endOfSegments),", "  Route.static(UncontrolledInputsPage, appRoot / \"form\" / \"uncontrolled-inputs\" / endOfSegments),", "  Route.static(ControlledInputsPage, appRoot / \"form\" / \"controlled-inputs\" / endOfSegments),", "  Route.static(FormStatePage, appRoot / \"form\" / \"form-state\" / endOfSegments),", "  Route.static(TodoMvcPage, appRoot / \"apps\" / \"todomvc\" / endOfSegments),", "  Route.static(UI5WebComponentsPage, appRoot / \"integrations\" / \"web-components\" / \"sap-ui5\" / endOfSegments),", "  Route.static(ShoelaceWebComponentsPage, appRoot / \"integrations\" / \"web-components\" / \"shoelace\" / endOfSegments),", "  Route.static(NetworkRequestsPage, appRoot / \"integrations\" / \"network-requests\" / endOfSegments),", "  Route.static(WaypointRoutingPage, appRoot / \"integrations\" / \"waypoint-url-routing\" / endOfSegments),", "  Route.static(CodeSnippetsPage, appRoot / \"integrations\" / \"code-snippets\" / endOfSegments),", "  Route[WeatherGradientPage, String](", "    encode = page => page.gradientId,", "    decode = gradientId => WeatherGradientPage(gradientId = gradientId),", "    pattern = appRoot / \"weather\" / \"gradient\" / segment[String] / endOfSegments", "  )", ")")),
  )
  
  val `waypoint/views` = List(
    CodeSnippet("./client/src/main/scala/com/raquo/app/views.scala", "views.scala", "scala".asInstanceOf[LanguageName], 13, 29, "waypoint/views", List("val views = SplitRender(JsRouter.currentPageSignal)", "  .collectStatic(HomePage)(HomePageView())", "  .collectStatic(HelloWorldPage)(HelloWorldView())", "  .collectStatic(CounterPage)(CounterView())", "  .collectStatic(TimePage)(TimeView())", "  .collectStatic(UncontrolledInputsPage)(UncontrolledInputsView())", "  .collectStatic(ControlledInputsPage)(ControlledInputsView())", "  .collectStatic(FormStatePage)(FormStateView())", "  .collectStatic(TodoMvcPage)(TodoMvcApp.node)", "  .collectSignal[WeatherGradientPage](WeatherGradientView(_))", "  .collectStatic(UI5WebComponentsPage)(SapUI5WebComponentsView())", "  .collectStatic(ShoelaceWebComponentsPage)(ShoelaceWebComponentsView())", "  .collectStatic(NetworkRequestsPage)(NetworkRequestsView())", "  .collectStatic(WaypointRoutingPage)(WaypointRoutingView())", "  .collectStatic(CodeSnippetsPage)(CodeSnippetsView())", "  .collectStatic(NotFoundPage)(renderNotFoundPage())", "  .signal")),
  )
  
  val `wind-gradient` = List(
    CodeSnippet("./shared/shared/src/main/scala/com/raquo/weather/GradientReport.scala", "GradientReport.scala", "scala".asInstanceOf[LanguageName], 6, 55, "wind-gradient", List("import io.bullet.borer.*", "import io.bullet.borer.derivation.MapBasedCodecs.*", "", "/**", "  *", "  * @param cities                  List of cities to display, in order", "  * @param currentConditionsByCity cityId -> currentConditions.", "  *                                Note: some records might be missing if current conditions are not available", "  * @param forecastDays            list of day captions, in order to be displayed", "  * @param forecastsByDay          (day_caption -> cityId -> forecast)", "  */", "@JSExportAll", "case class GradientReport(", "  cities: List[CityStation],", "  currentConditionsByCity: Map[String, CityCurrentConditions],", "  forecastDays: List[String],", "  forecastsByDay: Map[String, Map[String, CityForecast]]", ") {", "", "  def selectCurrentConditions[A](", "    f: CityCurrentConditions => Option[A]", "  ): List[Option[A]] = {", "    cities.flatMap { city =>", "      for {", "        conditions <- currentConditionsByCity.get(city.id)", "      } yield {", "        f(conditions)", "      }", "    }", "  }", "", "  def selectForecasts[A](", "    day: String,", "    f: CityForecast => Option[A]", "  ): List[Option[A]] = {", "    cities.flatMap { city =>", "      for {", "        forecastsByCity <- forecastsByDay.get(day)", "        forecast <- forecastsByCity.get(city.id)", "      } yield {", "        f(forecast)", "      }", "    }", "  }", "}", "", "object GradientReport {", "", "  given codec: Codec[GradientReport] = deriveCodec", "}")),
    CodeSnippet("./shared/shared/src/main/scala/com/raquo/weather/Gradient.scala", "Gradient.scala", "scala".asInstanceOf[LanguageName], 8, 44, "wind-gradient", List("@JSExportAll", "enum Gradient(", "  val id: String,", "  val name: String,", "  val cities: List[CityStation]", ") {", "", "  val cityIds: List[String] = cities.map(_.id)", "", "  // Note: Lytton burned down and does not have current observations, so its usefulness is questionable", "  case Squamish extends Gradient(", "    id = \"squamish\",", "    name = \"Squamish\",", "    cities = List(Kamloops, Lytton, Merritt, Hope, Abbotsford, Vancouver, CityStation.Squamish, Whistler, Pemberton, Lillooet)", "  )", "", "  case Nitinat extends Gradient(", "    id = \"nitinat\",", "    name = \"Nitinat\",", "    cities = List(Ucluelet, PortAlberni)", "  )", "}", "", "object Gradient {", "", "  //given codec: Codec[Gradient] = Codec.of[String].bimap(_.id, forId(_))", "", "  val gradientIds: List[String] = Gradient.values.map(_.id).toList", "", "  def forId(gradientId: String): Option[Gradient] = {", "    Gradient.values.find(_.id == gradientId)", "  }", "", "  def forIdGet(gradientId: String): Gradient = {", "    forId(gradientId).getOrElse(throw new Exception(s\"Unknown gradient id: `${gradientId}`\"))", "  }", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/weather/WeatherGradientChart.scala", "WeatherGradientChart.scala", "scala".asInstanceOf[LanguageName], 12, 227, "wind-gradient", List("object WeatherGradientChart {", "", "  def makeChart(", "    canvasElement: dom.html.Canvas", "  ): Chart = {", "    // Note: most data and configuration is updated when the graph data is received", "", "    val chart = new Chart(", "      canvas = canvasElement,", "      config = new ChartConfig(", "        data = new ChartData(),", "        options = new ChartConfigOptions(", "          animation = false,", "          plugins = js.Dictionary(", "            \"legend\" -> js.Dynamic.literal(", "              \"display\" -> true,", "              \"position\" -> \"bottom\",", "              \"labels\" -> js.Dynamic.literal(", "                \"boxHeight\" -> 0,", "              )", "            ),", "            \"datalabels\" -> js.Dynamic.literal(", "              \"font\" -> js.Dynamic.literal(", "                \"weight\" -> \"bold\"", "              )", "            )", "          ),", "          // This makes the chart respond to match the size of its", "          // parent container (-graphbox in our case).", "          // See https://www.chartjs.org/docs/latest/configuration/responsive.html", "          maintainAspectRatio = false", "        )", "      )", "    )", "", "    chart", "  }", "", "  def updateChart(chart: Chart, selectedDay: Option[String], report: GradientReport): Unit = {", "    val cityNames = report.cities.toJSArray.map(_.name)", "", "    val (temperatures, pressures, datasets) = selectedDay match {", "      case None =>", "        // Current weather", "        val temperatures = report.selectCurrentConditions(_.temperatureC)", "        val pressures = report.selectCurrentConditions(_.pressureKPa)", "        (", "          temperatures.flatten,", "          pressures.flatten,", "          js.Array(", "            temperatureDatasetConfig(temperatures.map(_.orNull).toJSArray),", "            pressureDatasetConfig(pressures.map(_.orNull).toJSArray)", "          )", "        )", "      case Some(forecastDay) =>", "        val temperatures = report.selectForecasts(forecastDay, _.temperatureC.some)", "        val datasets = js.Array(", "          temperatureDatasetConfig(temperatures.map(_.orNull).toJSArray)", "        )", "        (temperatures.flatten, Nil, datasets)", "    }", "", "    val axes = scalesConfig(temperatures, pressures)", "", "    // To update chart.js graph, you need to mutate its config,", "    // then call chart.update() for it to take effect.", "    chart.config.data.labels = cityNames", "    chart.config.data.datasets = datasets", "    chart.config.options.scales = axes", "    chart.update()", "  }", "", "  private def temperatureDatasetConfig(temperatures: js.Array[Double | Null]): ChartDataset = {", "    new ChartDataset(", "      label = \"Temperature\",", "      typ = \"line\",", "      yAxisID = \"yMain\",", "      data = temperatures,", "      borderColor = \"#0000f0\",", "      pointBackgroundColor = \"#0000d0\",", "      pointBorderWidth = 0,", "      pointRadius = 4,", "      pointHoverRadius = 5,", "      pointHoverBorderWidth = 0", "    ).updateDynamic(", "      \"spanGaps\" -> true,", "      \"datalabels\" -> js.Dynamic.literal(", "        \"align\" -> \"top\",", "        \"color\" -> \"#000080\",", "        \"formatter\" -> (((value: Double, ctx: js.Dynamic) => {", "          Math.round(value).toString + \"°\"", "        }): js.Function2[Double, js.Dynamic, Any])", "      )", "    )", "  }", "", "  private def pressureDatasetConfig(pressures: js.Array[Double | Null]): ChartDataset = {", "    new ChartDataset(", "      label = \"Pressure\",", "      typ = \"line\",", "      yAxisID = \"yPressure\",", "      data = pressures,", "      borderColor = \"#f00000\",", "      pointBackgroundColor = \"#d00000\",", "      pointBorderWidth = 0,", "      pointRadius = 4,", "      pointHoverRadius = 5,", "      pointHoverBorderWidth = 0", "    ).updateDynamic(", "      \"spanGaps\" -> true,", "      \"datalabels\" -> js.Dynamic.literal(", "        \"align\" -> \"top\",", "        \"color\" -> \"#800000\"", "      )", "    )", "  }", "", "  private def scalesConfig(", "    temperatures: List[Double],", "    pressures: List[Double]", "  ): js.Dictionary[ChartAxis] = {", "    val xAxis = new ChartAxis()", "      .updateDynamic(", "        \"type\" -> \"category\",", "        \"grid\" -> js.Dictionary(", "          \"display\" -> false", "        ),", "        \"ticks\" -> js.Dynamic.literal(", "          \"minRotation\" -> 90,", "          \"maxRotation\" -> 90,", "        ),", "        \"offset\" -> true", "      )", "    val scales = js.Dictionary(", "      \"x\" -> xAxis,", "      \"yMain\" -> yMainScale(temperatures)", "    )", "", "    yPressureScale(pressures).foreach { scale =>", "      scales.update(\"yPressure\", scale)", "    }", "", "    scales", "  }", "", "  private def yMainScale(temperatures: List[Double]): ChartAxis = {", "    val stepSize = 5", "    val range = fixedScaleRange(", "      step = stepSize,", "      desiredNumSteps = 7,", "      dataValues = temperatures,", "      forceMin = if (temperatures.forall(_ > 0)) Some(0) else None", "    )", "    new ChartAxis(", "      position = \"left\",", "      min = range.map(_._1).orUndefined,", "      max = range.map(_._2).orUndefined", "    ).updateDynamic(", "      \"ticks\" -> js.Dictionary(", "        //\"count\" -> 7,", "        \"stepSize\" -> stepSize", "      ),", "      \"grid\" -> js.Dictionary(", "        \"display\" -> false", "      )", "    )", "  }", "", "  private def yPressureScale(pressures: List[Double]): Option[ChartAxis] = {", "    val pressureStepSize = 0.1", "    fixedScaleRange(", "      step = pressureStepSize,", "      desiredNumSteps = 8,", "      dataValues = pressures", "    ).map { (min, max) =>", "      new ChartAxis(", "        position = \"right\",", "        min = min,", "        max = max + pressureStepSize // allow extra space for data point labels", "      ).updateDynamic(", "        \"ticks\" -> js.Dictionary(", "          \"stepSize\" -> pressureStepSize,", "          \"callback\" -> (((value: Double) => f\"$value%.1f\"): js.Function1[Double, String])", "        ),", "        \"grid\" -> js.Dictionary(", "          \"display\" -> false", "        )", "      )", "    }", "  }", "", "  /** We want vertical axes to have consistent range (max - min value),", "    * so that it's easier for the user to judge the difference between", "    * the values for different cities on the chart. We also want to", "    * snap the min and max to certain steps.", "    * */", "  private def fixedScaleRange(", "    step: Double,", "    desiredNumSteps: Int,", "    dataValues: List[Double],", "    forceMin: Option[Double] = None", "  ): Option[(Double, Double)] = {", "    for {", "      minValue <- dataValues.minOption", "      maxValue <- dataValues.maxOption", "    } yield {", "      val desiredRange = desiredNumSteps * step", "      val scaleMin = forceMin.getOrElse {", "        val mean = (minValue + maxValue) / 2", "        Math.floor((mean - desiredRange / 2) / step) * step", "      }", "      val scaleMax = scaleMin + desiredRange", "      (scaleMin, scaleMax)", "    }", "  }", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/weather/WeatherGradientView.less", "WeatherGradientView.less", "less".asInstanceOf[LanguageName], 2, 28, "wind-gradient", List(".WeatherGradientView {", "", "  --chartHeight: 400px;", "", "  @media(max-width: 800px) {", "    --chartHeight: min(100vh, 100vw);", "  }", "", "  .Tabs {", "    margin: 20px 0;", "  }", "", "  .-loading {", "    display: flex;", "    align-items: center;", "    justify-content: center;", "    height: var(--chartHeight);", "    background: #f5f5f5;", "    color: #333;", "    font-size: 0.9em;", "  }", "", "  .-graphbox {", "    position: relative;", "    height: var(--chartHeight);", "  }", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/app/weather/WeatherGradientView.scala", "WeatherGradientView.scala", "scala".asInstanceOf[LanguageName], 18, 191, "wind-gradient", List("object WeatherGradientView {", "", "  // Find and import the LESS (CSS) file for this component. See globResolverPlugin and importSideEffectPlugin", "  JSImportSideEffect(\"@find/**/WeatherGradientView.less\")", "", "  // Chart.js requires you to load the necessary components this way", "  // to avoid loading the entire library. It will also tell you which", "  // components are needed if you forget to include them.", "  Chart.register(", "    ChartDataLabelsPlugin,", "    Legend,", "    //BarController,", "    //BarElement,", "    LineController,", "    LineElement,", "    PointElement,", "    CategoryScale,", "    LinearScale,", "  )", "", "  def apply(pageS: Signal[WeatherGradientPage]): HtmlElement = {", "", "    // Just a naming convention: if a variable ends in a capital S, it's a Signal or Stream.", "    // Helps to differentiate Scala collections from observables, and their mixes:", "    // e.g. users: List[user], userS: Signal[User], usersS: Signal[List[User]]", "    // #Note: `def` is important here, but not for long, looking to fix it in 17.0.0", "    //  https://github.com/raquo/Airstream/issues/111", "    def gradientS = pageS.flatMap { p =>", "      Gradient.forId(p.gradientId) match {", "        case Some(gradient) =>", "          EventStream.fromValue(gradient)", "        case None =>", "          js.timers.setTimeout(0) {", "            // #TODO the delay is needed in case when you're serving the production application,", "            //  and the user navigates to a bad gradient wind URL via the address bar (as opposed", "            //  to using waypoint / pushState). Not quire sure why, must be some race condition.", "            //  Ideally Waypoint should have better built-in support for async route validation.", "            //  Actually it would be good to show how to do both sync and async route validation.", "            forcePage(NotFoundPage)", "          }", "          EventStream.empty", "      }", "    }", "", "    val apiResponseS = gradientS.flatMap { gradient =>", "      FetchStream", "        .withDecoder(jsonApiDecoder[GradientReport])", "        .get(absRoot / \"api\" / \"weather\" / \"gradient\" / gradient.id)", "    }", "    // collect-ing the stream simply skips all events that don't match", "    // (errors, in this case). Note: you can't `filter` or `collect`", "    // SIGNALS because they must always have a current value.", "    // Read Airstream docs to understand why, and how to do what you need.", "    val gradientReportStream = apiResponseS.collect {", "      case ApiResponse.Result(report) => report", "    }", "", "    div(", "      // attr(value) is alias for attr := value", "      // `cls` is alias for `className` – this HTML DOM property sets CSS class name on this element", "      cls(\"WeatherGradientView\"),", "      h1(", "        child.text <-- gradientS.map(_.name + \" gradient\")", "      ),", "      renderOtherGradients(gradientS),", "      renderError(apiResponseS),", "      child <-- gradientReportStream.toWeakSignal.splitOption(", "        (initialReport, reportSignal) => renderChart(initialReport, reportSignal),", "        ifEmpty = div(cls(\"-loading\"), \"Fetching data...\")", "      ),", "      CodeSnippets(", "        _.`wind-gradient`.sortBy(_.fileName != \"WeatherGradientView.scala\"),", "        startExpanded = _.fileName == \"WeatherGradientView.scala\"", "      )", "    )", "  }", "", "  private def renderOtherGradients(", "    gradientS: EventStream[Gradient]", "  ): Modifier.Base = {", "    // We use implicit conversion here to convert a list of modifiers into one modifier", "    List[Modifier.Base](", "      \"See also: \",", "      children <-- gradientS.map { gradient =>", "        val otherGradients = Gradient.values.filterNot(_ == gradient)", "        otherGradients.flatMap { g =>", "          List[Node]( // Node is the common type of elements and text nodes", "            a(g.name, navigateTo(WeatherGradientPage(g.id))),", "            \", \"", "          )", "        }.toList.init", "      }", "    )", "  }", "", "  // This function is only called once (when gradientReportStream emits", "  // the network response), so all the elements that it creates are created", "  // only once. Remember – no virtual DOM in Laminar.", "  // Then, we use lifecycle hooks and --> methods to bring reactivity to", "  // those elements that we created, so that, for example, when you click", "  // on a tab for a different day, we don't re-render the whole chart from", "  // scratch, but rather we update it with new data using Chart.js update API.", "  private def renderChart(", "    initialReport: GradientReport,", "    gradientReportS: Signal[GradientReport]", "  ): HtmlElement = {", "    val selectedDayVar = Var(Option.empty[String]) // \"None\" means \"Current observations\"", "    var maybeChart = Option.empty[Chart]", "    div(", "      Tabs(", "        initialReport.forecastDays,", "        maybeForecastDay => {", "          List(", "            // Setting class name dynamically", "            cls.toggle(\"x-selected\") <-- selectedDayVar.signal.map(_ == maybeForecastDay),", "            // When this tab button is clicked, send the corresponding day into the var", "            onClick.mapTo(maybeForecastDay) --> selectedDayVar", "          )", "        }", "      ),", "      div(", "        // Don't put anything else in this div except for the canvas tag!", "        // That's a Chart.js requirement for responsive sizing.", "        cls(\"-graphbox\"),", "        canvasTag(", "          // This lifecycle block instantiates the chart when this element is mounted,", "          // and frees up its resources when it's unmounted. This way you can navigate", "          // in and out of the graph page without using up more resources than needed.", "          onMountUnmountCallback(", "            mount = ctx => {", "              maybeChart = Some(WeatherGradientChart.makeChart(ctx.thisNode.ref))", "            },", "            unmount = _ => maybeChart.foreach(_.destroy())", "          ),", "          // The callback below is invoked whenever you select a different date, or whenever", "          // we get new data from the server (the latter only happens once in this application).", "          // As you see we are not re-creating the chart here on every update, rather,", "          // we reuse the existing chart, pushing updated config to it. This is much more", "          // efficient and gives users a better experience.", "          //", "          // Note: mounting (see onMountUnmountCallback above) is synchronous, and the network", "          // request to fetch graph data is asynchronous, so the latter is guaranteed to happen", "          // AFTER this mounting callback. In this callback we implicitly rely on this sequence", "          // of events, because if it was the other way round, maybeChart here would be empty,", "          // and this callback wouldn't do anything. You always need to consider such things", "          // when building UI applications, but thankfully JS world is single threaded, so it's", "          // much easier to reason about.", "          selectedDayVar.signal.combineWith(gradientReportS) --> { (selectedDay, report) =>", "            maybeChart.foreach { chart =>", "              WeatherGradientChart.updateChart(chart, selectedDay, report)", "            }", "          }", "        ),", "      )", "    )", "  }", "", "", "", "  // Your render functions don't need to return just elements, for example", "  // this one returns a Modifier that inserts a dynamic child node wherever", "  // it's put.", "  private def renderError(apiResponseS: EventStream[ApiResponse[_]]): Mod[Element] = {", "    val maybeApiErrorS = apiResponseS.collect {", "      case ApiResponse.Error(msg, _) => Some(msg)", "      case _ => None", "    }", "    child.maybe <-- maybeApiErrorS.map(_.map { err =>", "      div(textAlign.center, span(cls(\"u-error\"), err))", "    })", "  }", "", "", "}")),
    CodeSnippet("./client/src/main/scala/com/raquo/utils/DynamicJsObject.scala", "DynamicJsObject.scala", "scala".asInstanceOf[LanguageName], 7, 7, "wind-gradient", List("trait DynamicJsObject extends js.Object")),
    CodeSnippet("./client/src/main/scala/com/raquo/utils/DynamicJsObject.scala", "DynamicJsObject.scala", "scala".asInstanceOf[LanguageName], 46, 53, "wind-gradient", List("extension (obj: DynamicJsObject)", "", "  def updateDynamic(keyValuePairs: (String, js.Any)*): obj.type = {", "    keyValuePairs.foreach { (key, value) =>", "      obj.asInstanceOf[js.Dynamic].updateDynamic(key)(value)", "    }", "    obj", "  }")),
    CodeSnippet("./client/src/main/scala/vendor/chartjs/ChartConfig.scala", "ChartConfig.scala", "scala".asInstanceOf[LanguageName], 28, 80, "wind-gradient", List("/**", "  * @param plugins Inline plugins for this chart.", "  *                - See [[https://www.chartjs.org/docs/latest/configuration/ Chart.js docs]]", "  *                  and [[https://www.chartjs.org/docs/latest/developers/plugins.html API]]", "  */", "class ChartConfig(", "  @JSName(\"type\")", "  var typ: String = null,", "  var data: ChartData,", "  var options: ChartConfigOptions = ChartConfigOptions(),", "  var plugins: js.Dictionary[js.Object] = js.Dictionary()", ") extends DynamicJsObject", "", "", "/**", "  * @param labels X axis labels", "  */", "class ChartData(", "  var labels: js.Array[String] | Unit = js.undefined,", "  var datasets: js.Array[ChartDataset] | Unit = js.undefined", ") extends DynamicJsObject", "", "", "/**", "  * @param label   Caption for this dataset", "  *", "  * @param data    Array of records. Actual records can be in very different shapes. See Chart.js docs.", "  *", "  * @param parsing How to parse the dataset.", "  *                - The parsing can be disabled by specifying `parsing: false`.", "  *                - If parsing is disabled, data must be sorted and in the formats the associated", "  *                  chart type and scales use internally.", "  *", "  *                Example data: `[{id: 'Sales', nested: {value: 1500}}, {id: 'Purchases', nested: {value: 500}}]`", "  *                And its parsing config for bar chart: `js.Dictionary(\"xAxisKey\" -> \"id\", \"yAxisKey\" -> \"nested.value\")`", "  */", "class ChartDataset(", "  var label: String,", "  @JSName(\"type\")", "  var typ: String | Unit = js.undefined,", "  var data: js.Array[_],", "  var backgroundColor: String | Unit = js.undefined,", "  var borderColor: String | Unit = js.undefined,", "  var pointBackgroundColor: String | Unit = js.undefined,", "  var pointBorderColor: String | Unit = js.undefined,", "  var pointBorderWidth: Number | Unit = js.undefined,", "  var pointRadius: Number | Unit = js.undefined,", "  var pointHoverBorderWidth: Number | Unit = js.undefined,", "  var pointHoverRadius: Number | Unit = js.undefined,", "  var parsing: js.Dictionary[String] | Boolean | Unit = js.undefined,", "  var xAxisID: String | Unit = js.undefined,", "  var yAxisID: String | Unit = js.undefined,", ") extends DynamicJsObject")),
    CodeSnippet("./client/src/main/scala/vendor/chartjs/ChartDataLabelsPlugin.scala", "ChartDataLabelsPlugin.scala", "scala".asInstanceOf[LanguageName], 7, 9, "wind-gradient", List("@js.native", "@JSImport(\"chartjs-plugin-datalabels\", JSImport.Default)", "object ChartDataLabelsPlugin extends js.Object")),
    CodeSnippet("./client/src/main/scala/vendor/chartjs/Chart.scala", "Chart.scala", "scala".asInstanceOf[LanguageName], 33, 56, "wind-gradient", List("@js.native", "@JSImport(\"chart.js\")", "class Chart(", "  val canvas: dom.HTMLCanvasElement | dom.CanvasRenderingContext2D,", "  val config: ChartConfig", ") extends js.Object {", "  ", "  /** Call this after mutating chart config, for it to take effect. */", "  def update(): Unit = js.native", "", "  def destroy(): Unit = js.native", "}", "", "@js.native", "@JSImport(\"chart.js\")", "object Chart extends js.Object {", "  ", "  def defaults: ChartConfigOptions = js.native", "  ", "  // Can accept: chart.js controllers, elements, plugins", "  def register(components: js.Object*): Unit = js.native", "", "  def unregister(components: js.Object*): Unit = js.native", "}")),
    CodeSnippet("./client/src/main/scala/vendor/chartjs/Chart.scala", "Chart.scala", "scala".asInstanceOf[LanguageName], 68, 78, "wind-gradient", List("@js.native", "@JSImport(\"chart.js\")", "object LineController extends js.Object", "", "@js.native", "@JSImport(\"chart.js\")", "object CategoryScale extends js.Object", "", "@js.native", "@JSImport(\"chart.js\")", "object LinearScale extends js.Object")),
  )
  
}
